# Nginx Config File

#user  nobody;
user   www-data;
pid    logs/nginx.pid;
worker_processes  4;         # 定义了nginx对外提供web服务时的worder进程数。 (设置为“auto”将尝试自动检测它)
worker_rlimit_nofile 100000; # 更改worker进程的最大打开文件数限制。如果没设置的话，这个值为操作系统的限制。

error_log  logs/error.log;
error_log  logs/error.log  notice;
error_log  logs/error.log  info;

events {
    use epoll;
    worker_connections  655350;
    multi_accept        on; # 告诉nginx收到一个新连接通知后接受尽可能多的连接。
}

http {

    include       mime.types;
    default_type  application/octet-stream;
    charset       utf-8;

    server_tokens off; # server_tokens 关闭在错误页面中的nginx版本数字，这样对于安全性是有好处的。

    ## SSL configuration
    # ssl                         on; # off | http, server
    # ssl_buffer_size             16k;
    # ssl_certificate             example.com.rsa.crt;
    # ssl_certificate_key         example.com.rsa.key;
    # ssl_certificate             example.com.ecdsa.crt;
    # ssl_certificate_key         example.com.ecdsa.key;
    # ssl_ciphers                 AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;
    # ssl_crl                     file;
    # ssl_dhparam                 file;	
    # ssl_ecdh_curve              auto;
    # ssl_password_file           file;
    # ssl_prefer_server_ciphers   off;
    # ssl_protocols               TLSv1 TLSv1.1 TLSv1.2;
    # ssl_session_cache           shared:SSL:10m;
    # ssl_session_ticket_key      file;
    # ssl_session_tickets         on;
    # ssl_session_timeout         10m;
    # ssl_stapling                off;
    # ssl_stapling_file           file;
    # ssl_stapling_responder      url;
    # ssl_stapling_verify         off;
    # ssl_trusted_certificate     file; 	
    # ssl_verify_client           off;	
    # ssl_verify_depth            1;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';


    log_format  main_static  '$remote_addr - $remote_user [$time_local] "$request" '
                             '$status $upstream_cache_status $body_bytes_sent "$http_referer" "$gzip_ratio" '
                             '"$http_user_agent" "$http_x_forwarded_for"';

    log_format main_json '{'
                          '"time": "$time_iso8601", '
                          '"remote_addr": "$remote_addr", '
                          '"body_bytes_sent": "$body_bytes_sent", '
                          '"gzip_ratio": "$gzip_ratio", '
                          '"status": "$status", '
                          '"request": "$request_time", '
                          '"request_method": "$request_method", '
                          '"http_referrer": "$http_referer", '
                          '"http_user_agent": "$http_user_agent", '
                          '"http_x_forwarded_for": "$http_x_forwarded_for", '
                          '"request_time": "$request_time", '
                          '"upstream_cache_status": "$upstream_cache_status", '
                          '"upstream_response_time": "$upstream_response_time"'
                          '}';                         

    access_log  logs/access.log  main;

    # chunked_transfer_encoding on;         # 可以开启或者关闭chunk模式，默认是开启的on | off。

    # 使用字段：http, server, location
    client_body_buffer_size 16k;            # 这个指令可以指定连接请求使用的缓冲区大小。
    client_body_in_single_buffer off;       # 指定将一个完整的连接请求放入缓冲区，当使用$request_body时推荐使用这个指令以减少复制操作。
    # client_body_in_single_buffer
    # client_body_temp_path
    # client_body_timeout
    # client_header_buffer_size
    client_header_buffer_size 1k;           # 使用字段：http, server # 这个指令指定客户端请求的http头部缓冲区大小绝大多数情况下一个头部请求的大小不会大于1k不过如果有
    # client_header_timeout
    client_max_body_size 32M;               # 如果请求大于指定的值，客户端将收到一个"Request Entity Too Large" (413)错误。
    
    ## connection_pool_size 512             # Allows accurate tuning of per-connection memory allocations. This directive has minimal impact on performance and should not generally be used. By default, the size is equal to 256 bytes on 32-bit platforms and 512 bytes on 64-bit platforms.
    ## directio
    ## directio_alignment 

    disable_symlinks off;                   # off on if_not_owner from=part

    # Context:	http, server, location, if in location
    error_page 404             /404.html;
    error_page 500 502 503 504 /50x.html;

    # etag on;                              # Enables or disables automatic generation of the “ETag” response header field for static resources.

    # if_modified_since                     # if_modified_since off | exact | before;

    # ignore_invalid_headers on | off;

    keepalive_disable               none;   # Disables keep-alive connections with misbehaving browsers.
    keepalive_requests              100;    # Sets the maximum number of requests that can be served through one keep-alive connection.
    keepalive_timeout               120;    # The first parameter sets a timeout during which a keep-alive client connection will stay open on the server side.

    large_client_header_buffers 4 64k;      # 使用字段：http, server 指令指定客户端请求的一些比较大的头文件到缓冲区的最大值，如果一个请求的URI大小超过这个值，服务器将返回一个"Request URI too large" (414)，同样，如果一个请求的头部字段大于这个值，服务器 将返回"Bad request" (400)。
    
    limit_rate 0;                           # Limits the rate of response transmission to a client. set $limit_rate 4k;
    limit_rate_after 1024k;                 # Sets the initial amount after which the further transmission of a response to a client will be rate limited.

    ## lingering_close on;                  # Controls how nginx closes client connections.
    ## lingering_time 30s;
    ## lingering_timeout 5s;

    open_file_cache          max=1000 inactive=20s;
    open_file_cache_valid    30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors   on;

    server_names_hash_bucket_size   128;    #服务器名字的hash表大小
    autoindex                       off;    #开启目录列表访问，合适下载服务器，默认关闭。
    tcp_nopush                      on;     #防止网络阻塞
    tcp_nodelay                     on;     #防止网络阻塞

    # 开启高效文件传输模式，
    # sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，
    # 如果用来进行下载等应用磁盘IO重负载应用，可设置为off，
    # 以平衡磁盘与网络I/O处理速度，降低系统的负载。
    # 注意：如果图片显示不正常把这个改成off。
    sendfile                        on;

    ## FastCGI相关参数是为了改善网站的性能：
    # 减少资源占用，提高访问速度。下面参数看字面意思都能理解。
    fastcgi_connect_timeout         300;
    fastcgi_send_timeout            300;
    fastcgi_read_timeout            300;
    fastcgi_buffer_size             64k;
    fastcgi_buffers                 4 64k;
    fastcgi_busy_buffers_size       128k;
    fastcgi_temp_file_write_size    128k;

    ## cache
    proxy_connect_timeout       5;
    proxy_read_timeout          60;
    proxy_send_timeout          5;
    proxy_buffer_size           16k;
    proxy_buffers               4 64k;
    proxy_busy_buffers_size     128k;
    proxy_temp_file_write_size  128k;
    proxy_temp_path             /raid/nginx/temp_dir;
    proxy_cache_path            /raid/nginx/cache levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=30g;

    # proxy_set_header
    proxy_set_header    Host            $host;
    proxy_set_header    X-Real-IP       $remote_addr;
    proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;

    # proxy_next_upstream error timeout invalid_header http_500 http_503 http_502 http_504;  # 连接有问题是增加失败次数
    # proxy_ignore_headers X-Accel-Expires Expires Cache-Control Set-Cookie;
    # $upstream_cache_status表示资源缓存的状态，有HIT MISS EXPIRED三种状态
    # add_header X-Cache $upstream_cache_status;
    add_header X-Cache '$upstream_cache_status from $server_addr';

    #gzip模块设置
    gzip                on;             # 开启gzip压缩输出
    gzip_buffers        4 16k;          # 压缩缓冲区
    gzip_comp_level     6;              # 压缩等级
    gzip_disable        "MSIE [1-6]\."; #IE6对Gzip不怎么友好，不给它Gzip了
    gzip_min_length     1k;             # 最小压缩文件大小， determined only from the “Content-Length” response header field.
    gzip_http_version   1.0;            # 压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
    gzip_proxied        any;            # 无条件启用压缩 gzip_proxied off | expired | no-cache | no-store | private | no_last_modified | no_etag | auth | any ...;
    gzip_types          text/plain text/xml text/css application/x-javascript text/javascript application/xml+rss text/json application/json; # image/jpeg image/gif image/png
    gzip_vary           on;             # 根据客户端的HTTP “User-Agent来判断，是否需要压缩

    ## gzip_static 此模块的作用就是在接到请求后，会先到到url相同的路径的文件系统去找扩展名为“.gz”的文件。 如：style.css -> style.css.gz
    # 这个模块不受gzip_types限制，对所有请求有效。所以不要在全局上使用，只在局部我们确认有.gz的目录中使用。 
    # Nginx不会自动的将压缩结果写入文件系统，所以如果想使用static_gzip模块，需要自己写提供.gz文件。
    gzip_static         off; # to serve pre-gzipped version  

    #limit_zone crawler $binary_remote_addr 10m; # 开启限制IP连接数的时候需要使用

    include vhosts/*.conf;
    
    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        # error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        # location ~ \.php$ {
        #     proxy_pass   http://127.0.0.1;
        # }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        # location ~ \.php$ {
        #     root           html;
        #     fastcgi_pass   127.0.0.1:9000;
        #     fastcgi_index  index.php;
        #     fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #     include        fastcgi_params;
        # }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        # location ~ /\.ht {
        #     deny  all;
        # }
    }


    #  another virtual host using mix of IP-, name-, and port-based configuration
    # 
    # server {
    #     listen       8000;
    #     listen       somename:8080;
    #     server_name  somename  alias  another.alias;

    #     location / {
    #         root   html;
    #         index  index.html index.htm;
    #     }
    # }


    # HTTPS server
    #
    # server {
    #     listen       443 ssl;
    #     server_name  localhost;

    #     ssl_certificate      cert.pem;
    #     ssl_certificate_key  cert.key;

    #     ssl_session_cache    shared:SSL:1m;
    #     ssl_session_timeout  5m;

    #     ssl_ciphers  HIGH:!aNULL:!MD5;
    #     ssl_prefer_server_ciphers  on;

    #     location / {
    #         root   html;
    #         index  index.html index.htm;
    #     }
    # }
}

