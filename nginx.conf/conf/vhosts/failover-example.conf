
# 1.down 表示单前的server暂时不参与负载
# 2.weight 默认为1.weight越大，负载的权重就越大
# 3.max_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误
# 4.fail_timeout:max_fails次失败后，暂停的时间
# 5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻

upstream backend_server {
    server   127.0.0.1:80 weight=1 max_fails=2 fail_timeout=30s;  
    server   127.0.0.2:80 weight=1 max_fails=2 fail_timeout=30s;  
    server   127.0.0.3:80 weight=1 max_fails=2 fail_timeout=30s;  
}

# nginx的upstream目前支持5种方式的分配
# 1、轮询（默认） 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。
# 2、weight 指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。
# 3、ip_hash 每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。
# 4、fair（第三方） 按后端服务器的响应时间来分配请求，响应时间短的优先分配。
# 5、url_hash（第三方）按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。

server  
{
     listen         80;
     server_name    www.domain.com 127.0.0.42;
     index          index.html index.htm;
     root           /data0/htdocs/www;
 
    location /  {
     #如果后端的服务器返回502、504、执行超时等错误，自动将请求转发到upstream负载均衡池中的另一台服务器，实现故障转移。  
     proxy_next_upstream http_502 http_504 error timeout invalid_header;
     
     proxy_cache cache_one;
     #对不同的HTTP状态码设置不同的缓存时间  
     proxy_cache_valid   200 304 12h;
     #以域名、URI、参数组合成Web缓存的Key值，Nginx根据Key值哈希，存储缓存内容到二级缓存目录内
     proxy_cache_key $host$uri$is_args$args;
     
     proxy_set_header   Host              $host;  
     proxy_set_header   X-Forwarded-For   $remote_addr;  
     proxy_pass         http://backend_server;  
     expires            1d;  
    }  
}