# Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

#
# The MySQL Community Server configuration file.
#
# For explanations see
# http://dev.mysql.com/doc/mysql/en/server-system-variables.html

[client]
port		= 3306
socket		= /var/run/mysqld/mysqld.sock

[mysqld_safe]
pid-file	= /var/run/mysqld/mysqld.pid
socket		= /var/run/mysqld/mysqld.sock
nice		= 0

[mysqld]
user		= mysql
pid-file	= /var/run/mysqld/mysqld.pid
socket		= /var/run/mysqld/mysqld.sock
port		= 3306
basedir		= /usr
datadir		= /var/lib/mysql
tmpdir		= /tmp

# 错误消息使用的语言环境。
# lc_messages     = en_US
lc-messages-dir	= /usr/share/mysql

# 在MySQL 5.6.6之前，TIMESTAMP的默认行为：TIMESTAMP列如果没有明确声明NULL属性，默认为NOT NULL，而其他数据类型，如果没有显示声明为NOT NULL，则允许NULL值。
# 也就是 explicit_defaults_for_timestamp 关闭了 timestamp 类型字段锁拥有的一些会让人感到奇怪的默认行为，
# 加入了该参数之后，如果还需要为timestamp类型的字段指定默认行为，那么就需要显示的在创建表时显示的指定。
explicit_defaults_for_timestamp

# Instead of skip-networking the default is now to listen only on
# localhost which is more compatible and is not less secure.
# bind-address	= 127.0.0.1

# character-set-server=utf8mb4
# character_set_client
# character-set-client-handshake = FALSE
# character_sets_dir
# character_set_system
# character-set-filesystem=binary
# character_set_database
# character_set_connection
# character_set_results

# collation-server=utf8mb4_unicode_ci
# collation_connection
# collation_database
# collation_server

# sql_mode是个很容易被忽视的变量，默认值是空值，在这种设置下是可以允许一些非法操作的，比如允许一些非法数据的插入。
# MySQL服务器可以以不同的SQL模式来操作，并且可以为不同客户端应用不同模式。这样每个应用程序可以根据自己的需求来定制服务器的操作模式。
# sql_mode常用值如下：
# ONLY_FULL_GROUP_BY：           对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中
# NO_AUTO_VALUE_ON_ZERO：        该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。如果用户希望插入的值为0，而该列又是自增长的，那么这个选项就有用了
# STRICT_TRANS_TABLES：          在该模式下，如果一个值不能插入到一个事务表中，则中断当前的操作，对非事务表不做限制
# NO_ZERO_IN_DATE：              在严格模式下，不允许日期和月份为零
# NO_ZERO_DATE：                 设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告
# ERROR_FOR_DIVISION_BY_ZERO：   在INSERT或UPDATE过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时MySQL返回NULL
# NO_AUTO_CREATE_USER：          禁止GRANT创建密码为空的用户
# NO_ENGINE_SUBSTITUTION：       如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常
# PIPES_AS_CONCAT：              将"||"视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样的，也和字符串的拼接函数Concat相类似
# ANSI_QUOTES：                  启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符
# ORACLE的sql_mode设置等同：PIPES_AS_CONCAT, ANSI_QUOTES, IGNORE_SPACE, NO_KEY_OPTIONS, NO_TABLE_OPTIONS, NO_FIELD_OPTIONS, NO_AUTO_CREATE_USER.
# Recommended in standard MySQL setup
sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES

# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0

# * IMPORTANT: Additional settings that can override those from this file!
#   The files must end with '.cnf', otherwise they'll be ignored.

# unix下lower_case_table_names默认值为 0 .Windows下默认值是 1 .Mac OS X下默认值是 2 .
lower_case_table_names = 0

# 查询日志
# general_log       = 1
# general_log_file  =

# 慢查询日志
slow_query_log                  = 1
long_query_time                 = 6
slow_query_log_file             = /var/log/mysql/slow.log
min_examined_row_limit          = 0
log_queries_not_using_indexes   = 1

# 错误日志
log-error	= /var/log/mysql/error.log

# 二进制日志
log_bin                 = /var/log/mysql/bin-log
# binlog_do_db          =
# binlog_ignore_db      =
binlog_cache_size       = 4M
max_binlog_cache_size   = 8M
max_binlog_size         = 1024M

# sync_binlog 这个参数直接影响mysql的性能和完整性
# 当事务提交后，Mysql仅仅是将binlog_cache中的数据写入Binlog文件，但不执行fsync之类的磁盘同步操作。
# 同步指令通知文件系统将缓存刷新到磁盘，而让Filesystem自行决定什么时候来做同步，这个是性能最好的。
# 在进行n次事务提交以后，Mysql将执行一次fsync之类的磁盘同步指令，同志文件系统将Binlog文件缓存刷新到磁盘。
# Mysql中默认的设置是sync_binlog=0，即不作任何强制性的磁盘刷新指令，这时性能是最好的，但风险也是最大的。
# 一旦系统绷Crash，在文件系统缓存中的所有Binlog信息都会丢失。
# If the value of this variable is greater than 0,
# the MySQL server synchronizes its binary log to disk (using fdatasync()) after sync_binlog commit groups are written to the binary log.
# The default value of sync_binlog is 0, which does no synchronizing to disk—in this case,
# the server relies on the operating system to flush the binary log's contents from time to time as for any other file.
# A value of 1 is the safest choice because in the event of a crash you lose at most one commit group from the binary log.
# However, it is also the slowest choice (unless the disk has a battery-backed cache, which makes synchronization very fast).
sync_binlog = 1

# 通过binlog参数（expire_logs_days）来实现mysql自动删除binlog
# The number of days for automatic binary log file removal.
# The default is 0, which means “no automatic removal.”
# Possible removals happen at startup and when the binary log is flushed.
expire_logs_days = 7

# 手工删除binlog
# mysql> reset master;   //删除master的binlog
# mysql> reset slave;    //删除slave的中继日志
# mysql> purge master logs before '2012-03-30 17:20:00';    //删除指定日期以前的日志索引中binlog日志文件
# mysql> purge master logs to 'binlog.000002';              //删除指定日志文件的日志索引中binlog日志文件

# 在MYSQL暂时停止响应新请求之前，短时间内的多少个请求可以被存在堆栈中。
# 如果系统在短时间内有很多连接，则需要增大该参数的值，该参数值指定到来的TCP/IP连接的监听队列的大小。
# 默认值 50 //50 + (max_connections / 5)。
# You need to increase this only if you expect a large number of connections in a short period of time.
back_log = 80

# MySQL允许最大的进程连接数，如果经常出现Too Many Connections的错误提示，则需要增大此值。
max_connections = 600

# 设置每个主机的连接请求异常中断的最大次数，当超过该次数，MYSQL服务器将禁止host的连接请求。
# 直到mysql服务器重启或通过flush hosts命令清空此host的相关信息。
max_connect_errors = 6000

# table_open_cache 参数设置表高速缓存的数目，每个连接进来，都会至少打开一个表缓存。
# 因此，table_open_cache 的大小应与 max_connections 的设置有关。
# 例如，对于 200 个并行运行的连接，应该让表的缓存至少有 200 × N ，这里 N 是应用可以执行的查询#的一个联接中表的最大数量。
# 此外，还需要为临时表和文件保留一些额外的文件描述符。
# 当 Mysql 访问一个表时，如果该表在缓存中已经被打开，则可以直接访问缓存；
# 如果还没有被缓存，但是在 Mysql 表缓冲区中还有空间，那么这个表就被打开并放入表缓冲区；
# 如果表缓存满了，则会按照一定的规则将当前未用的表释放，或者临时扩大表缓存来存放，使用表缓存的好处是可以更快速地访问表中的内容。
# 执行 flush tables 会清空缓存的内容。
# SHOW GLOBAL STATUS LIKE 'open%tables%';
table_open_cache = 1024

# The number of open tables cache instances (default 1).
# To improve scalability by reducing contention among sessions,
# the open tables cache can be partitioned into several smaller cache instances of size table_open_cache / table_open_cache_instances .
# A session needs to lock only one instance to access it for DML statements.
# This segments cache access among instances,
# permitting higher performance for operations that use the cache when there are many sessions accessing tables.
# (DDL statements still require a lock on the entire cache, but such statements are much less frequent than DML statements.)
# A value of 8 or 16 is recommended on systems that routinely use 16 or more cores.
table_open_cache_instances = 16

# 使用–skip-external-locking MySQL选项以避免外部锁定。该选项默认开启
# 当外部锁定（external-locking）起作用时，每个进程若要访问数据表，则必须等待之前的进程完成操作并解除锁定。
# 由于服务器访问数据表时经常需要等待解锁，因此在单服务器环境下external locking会让MySQL性能下降。
# 所以在很多Linux发行版的源中，MySQL配置文件中默认使用了skip-external-locking来避免external locking。
external-locking = FALSE

# 设置在网络传输中一次消息传输量的最大值, 必须设置1024的倍数。
# The default is 4MB as of MySQL 5.6.6, 1MB before that.
max_allowed_packet = 16M

# sort_buffer_size 是一个connection级参数，在每个connection（session）第一次需要使用这个buffer的时候，一次性分配设置的内存。
# sort_buffer_size 并不是越大越好，由于是connection级的参数，过大的设置+高并发可能会耗尽系统内存资源。例如：500个连接将会消耗 500 * sort_buffer_size(8M)=4G内存。
# sort_buffer_size 超过2KB的时候，就会使用mmap()而不是malloc()来进行内存分配，导致效率降低。
sort_buffer_size = 262144

# 用于表间关联缓存的大小，和sort_buffer_size一样，该参数对应的分配内存也是每个连接独享。
# 如果应用中，很少出现join语句，则可以不用太在乎join_buffer_size参数的设置大小。
# 如果join语句不是很少的话，个人建议可以适当增大join_buffer_size到1MB左右，如果内存充足可以设置为2MB。
# join_buffer_size = 2M

# 服务器线程缓存这个值表示可以重新利用保存在缓存中线程的数量。
# 通过比较 Connections 和 Threads_created 状态的变量，可以看到这个变量的作用。
# show global status like 'Thread%';
# show variables like 'thread_cache_size';
thread_cache_size = 512

#设置MYSQL每个线程的堆栈大小，默认值足够大，可满足普通操作。可设置范围为128K至4GB，默认为192KB。
thread_stack = 192K

# 查询资料得知，query_cache需谨慎开启，业务中使用redis缓存，此处开启应该也用处不大，默认关闭。
# SHOW STATUS LIKE 'Qcache%';
query_cache_type                = ON     # Cache results only for cacheable queries that begin with SELECT SQL_CACHE.
query_cache_size                = 128M   # 设置 Query Cache 所使用的内存大小，默认值为0，大小必须是1024的整数倍
query_cache_limit               = 4M     # Do not cache results that are larger than this number of bytes. The default value is 1MB.
query_cache_min_res_unit        = 1k     # 设置Query Cache中每次分配内存的最小空间大小，也就是每个Query的Cache最小占用的内存空间大小
query_cache_wlock_invalidate    = FALSE  # 控制当有写锁加在表上的时候，是否先让该表相关的 Query Cache失效
query_prealloc_size             = 16M    #
query_alloc_block_size          = 8192   # 为查询分析和执行过程中创建的对象分配的内存块大小

# 设定默认的事务隔离级别.可用的级别如下:
# READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE
# 1.READ UNCOMMITTED    -读未提交
# 2.READ COMMITTE       -读已提交
# 3.REPEATABLE READ     -可重复读
# 4.SERIALIZABLE        -串行
# transaction_isolation = READ-COMMITTED

# tmp_table_size 的默认大小是 32M。
# 如果一张临时表超出该大小，MySQL产生一个 The table tbl_name is full 形式的错误，
# 如果你做很多高级 GROUP BY 查询，增加 tmp_table_size 值。如果超过该值，则会将临时表写入磁盘。
tmp_table_size = 256M
max_heap_table_size = 256M

# 批定用于索引的缓冲区大小，增加它可以得到更好的索引处理性能，对于内存在4GB左右的服务器来说，该参数可设置为256MB或384MB。
# 决定索引处理的速度，尤其是索引读的速度。默认值是16M，通过检查状态值Key_read_requests和Key_reads，可以知道key_buffer_size设置是否合理。
key_buffer_size = 256MB

# MySql读入缓冲区大小。
# 对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。
# 如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能。
# 和sort_buffer_size一样，该参数对应的分配内存也是每个连接独享。
read_buffer_size = 4M

# MySql的随机读（查询操作）缓冲区大小。
# 当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。
# 进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。
# 但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。
read_rnd_buffer_size = 16M

# 批量插入数据缓存大小，可以有效提高插入效率，默认为8M
bulk_insert_buffer_size = 64M

# InnoDB主索引是聚簇索引，索引与数据共用表空间，对于InnoDB而言，数据就是索引，索引就是数据。
# InnoDB缓存机制和MyISAM缓存机制的最大区别就是在于，InnoDB不仅仅是缓存索引，还会是缓存数据。
# 与MyISAM相比，InnoDB缓存可以占用更多的服务器内存缓存InnoDB表的相关信息，提升InnoDB性能。

# 使用innodb_file_per_table的好处有：
# 1. 如果使用软链接将大表分配到不同的分区上，易于管理数据文件
# 2. 易于监控解决IO资源使用的问题
# 3. 易于修复和恢复损坏的数据
# 3.1 相互独立的，不会影响其他innodb表
# 3.2 导出导入只针对单个表，而不是整个共享表空间
# 4. 解决单个文件大小的限制
# 5. 对于大量的delete操作，更易于回收磁盘空间
# 6. 碎片较少，易于整理optimize table
# 7. 易于安全审计
# 8. 易于备份
# 如果在innodb表已创建后设置innodb_file_per_table，
# 那么数据将不会迁移到单独的表空间上，而是续集使用之前的共享表空间。
# 只有新创建的表才会分离到自己的表空间文件。
# 备注：innodb_file_per_table是静态变量，更改后要重启mysql服务才能生效。
# 独享表空间（关闭）
# show variables like '%per_table%';
# innodb_file_per_table = 1

# 表空间文件 重要数据
# innodb_data_home_dir =
# innodb_data_file_path = ibdata1:1024M:autoextend
# innodb_data_file_path=/ibdata/ibdata1:50M;/ibdata/ibdata2:50M:autoextend

# 文件IO的线程数，一般为 4，但是在 Windows 下，可以设置得较大。
innodb_file_io_threads = 4

# 服务器有几个CPU就设置为几，建议用默认设置，一般为8.
innodb_thread_concurrency = 8

# 这对Innodb表来说非常重要。Innodb相比MyISAM表对缓冲更为敏感。
# MyISAM可以在默认的 key_buffer_size 设置下运行的可以，然而Innodb在默认的 innodb_buffer_pool_size 设置下却跟蜗牛似的。
# 由于Innodb把数据和索引都缓存起来，数值越大越有利。
# 专用的MySQL服务器无需留给操作系统太多的内存，因此如果只需要用Innodb的话则可以设置它高达70%-80%的可用内存。
# 一些应用于 key_buffer 的规则有 — 如果你的数据量不大，并且不会暴增，那么无需把 innodb_buffer_pool_size 设置的太大了
# on a modern Linux x86_64 server, initialization of a 10GB buffer pool takes approximately 6 seconds
innodb_buffer_pool_size             = 2048M
innodb_buffer_pool_instances        = 64
InnoDB_additional_mem_pool_size     = 64M
innodb_buffer_pool_dump_at_shutdown = ON
innodb_buffer_pool_load_at_startup  = ON
innodb_buffer_pool_dump_now         = ON
innodb_buffer_pool_load_now         = ON
innodb_buffer_pool_load_abort       = ON
innodb_buffer_pool_filename         =

# innodb_old_blocks_pct:    控制old page子链表在LRU链表中的长度。
# innodb_old_blocks_time:   控制old page子链表的数据页移动到new page 子链表中的时机。

# 如果设置为0，log buffer将每秒一次地写入log file中，并且log file的flush(刷到磁盘)操作同时进行.该模式下，在事务提交的时候，不会主动触发写入磁盘的操作。
# 如果设置为1，每次事务提交时MySQL都会把log buffer的数据写入log file，并且flush(刷到磁盘)中去.
# 如果设置为2，每次事务提交时MySQL都会把log buffer的数据写入log file.但是flush(刷到磁盘)操作并不会同时进行。该模式下,MySQL会每秒执行一次 flush(刷到磁盘)操作。
# 由于进程调度策略问题,这个“每秒执行一次 flush(刷到磁盘)操作”并不是保证100%的“每秒”。
# sync_binlog 的默认值是0，像操作系统刷其他文件的机制一样，MySQL不会同步到磁盘中去而是依赖操作系统来刷新binary log。
# 双1适合数据安全性要求非常高，而且磁盘IO写能力足够支持业务，比如订单,交易,充值,支付消费系统。
# 双1模式下，当磁盘IO无法满足业务需求时 比如11.11 活动的压力。
# 推荐的做法是 innodb_flush_log_at_trx_commit=2 ，sync_binlog=N (N为500 或1000) 且使用带蓄电池后备电源的缓存cache，防止系统断电异常。
innodb_flush_log_at_trx_commit = 2

# 此参数确定些日志文件所用的内存大小，以M为单位。
# 缓冲区更大能提高性能，但意外的故障将会丢失数据。
# 该变量将数据存导入到内存中，可以减少大量的IO资源消耗。
# 当事务提交时，保存脏数据，后续在刷新到磁盘。
# 当我们调整innodb_buffer_pool_size大小时，innodb_log_buffer_size和innodb_log_file_size也应该做出相应的调整。
innodb_log_buffer_size = 16M

# 这个选项决定着性能，要慎重设置。默认设置为5M，难以满足生产环境下的需求。
# 日志文件在mysql实例第一次启动时初始化，该文件是旋转的，因此可以根据文件修改时间来判断日志文件的旋转频率，旋转频率太频繁说明日志文件太小了要扩大。
# 影响日志文件性能的变量是innodb_log_buffer_size，确保有足够大的日志缓冲区来保存脏数据在被写入到日志文件之前。
# innodb_log_file_size设置大小通常视innodb_buffer_pool_size而定，对于比较小的innodb_buffer_pool_size，建议是设置一样大。
# 但是，对于比较大的innodb_buffer_pool_size，不建议这么设置，这会存在一个潜在的问题，那就是当mysql挂掉时，恢复数据需要很久，造成大量的停机时间。
# 官方文档的建议设置是innodb_buffer_pool_size/innodb_log_files_in_group。
# innodb_log_file_size是静态的变量，需要以“干净”的方式更改并重新启动，否则mysql启动不起来。
# 为提高性能，MySQL可以以循环方式将日志文件写到多个文件。
# 这些日志位于innodb_log_group_home_dir变量定义的目录中，通常我们把这个目录设置与innodb_data_home_dir变量相同。
# 为了获得最佳性能，建议分离innodb_data_home_dir和innodb_log_group_home_dir到单独的物理存储阵列上，这样可以保证IO资源不起冲突，利于服务器处理大量高并发连接。
innodb_log_file_size = 256M
innodb_log_files_in_group = 8
# innodb_log_group_home_dir

# 开启或关闭，带来的影响是是否在压缩时记录全page，当关闭该选项时，可以减少redo的写入量。 日志模块的开销减小，可以带来tps的提升。
# innodb_log_compressed_pages

# Buffer_Pool中Dirty_Page所占的数量，直接影响InnoDB的关闭时间。
# 参数innodb_max_dirty_pages_pct 可以直接控制了Dirty_Page在Buffer_Pool中所占的比率，而且幸运的是innodb_max_dirty_pages_pct是可以动态改变的。
# 在关闭InnoDB之前先将innodb_max_dirty_pages_pct调小，强制数据块Flush一段时间，则能够大大缩短MySQL关闭的时间。
innodb_max_dirty_pages_pct = 80

# InnoDB 有其内置的死锁检测机制，能导致未完成的事务回滚。
# 但是，如果结合InnoDB使用MyISAM的lock tables语句或第三方事务引擎，则InnoDB无法识别死锁。
# 为消除这种可能性，可以将innodb_lock_wait_timeout设置为一个整数值，指示 MySQL在允许其他事务修改那些最终受事务回滚的数据之前要等待多长时间(秒数)
innodb_lock_wait_timeout = 90

# MyISAM表发生变化时重新排序所需的缓冲
myisam_sort_buffer_size = 128M

# MySQL重建索引时所允许的最大临时文件的大小 (当 REPAIR, ALTER TABLE 或者 LOAD DATA INFILE).
# 如果文件大小比此值更大,索引会通过键值缓冲创建(更慢)
myisam_max_sort_file_size = 10G

# 如果一个表拥有超过一个索引, MyISAM 可以通过并行排序使用超过一个线程去修复他们.
# 这对于拥有多个CPU以及大量内存情况的用户，是一个很好的选择.
myisam_repair_threads = 1

# 自动检查和修复没有适当关闭的 MyISAM 表
# DEFAULT: 不用备份，强制，或快速检查进行恢复。
# BACKUP: 如果数据文件在恢复时被更改，将MYD 文件的备份保存为 tbl_name‐datetime.BAK。
# FORCE: 即使会从.MYD 文件丢失多于一行仍运行恢复。
# QUICK: 如果没有任何delete块就不检查行。
# myisam-recover-options

# 服务器唯一ID，默认是1，一般取IP最后一段
server-id = 1

!includedir /etc/mysql/conf.d/

